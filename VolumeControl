#imports necessary modules - cv for video, os and sys for os integration, and time for timing motions
import cv
import os
import sys
import time
from subprocess import Popen, PIPE


#Systemname True= Linux False= Mac
stdout = Popen('uname -a', shell=True,stdout=PIPE).stdout
systemname= stdout.read();
sysname= True
if 'Mac' in systemname:
    sysname= False
else: 
    sysname= True


#Creates two windows named w1 and w2
cv.NamedWindow("w1", cv.CV_WINDOW_AUTOSIZE)
cv.NamedWindow("w2", cv.CV_WINDOW_AUTOSIZE)

#goes through all potential cameras to choose working camera
for i in range(3):
    capture = cv.CaptureFromCAM(i)
    if capture: break

#takes initial picture of background
bg = cv.QueryFrame(capture)

#creates static white image
black = cv.CreateImage(cv.GetSize(bg),8,1)
cv.Set(black,255);

#creates temporary variables
sframe = cv.CreateImage(cv.GetSize(bg),8,3)
dog = cv.CreateImage(cv.GetSize(bg),8,1)
grey=cv.CreateImage(cv.GetSize(bg),8,1)
cframe = cv.CreateImage(cv.GetSize(bg), 8, 1)

'''bgray = cv.CreateImage((bg.width,bg.height),8,1)
cv.CvtColor(bg,bgray,cv.CV_BGR2GRAY)
maks = cv.CreateImage((bg.width, bg.height), cv.IPL_DEPTH_8U, 1)
c = cv.WaitKey(10)'''

#initializes variables for motion start time, mute status, and previous hand position
begin = 0.0
unmute = True
last = (0,0)

#Skin detection function, takes rgb image as input
def skin(img):

    #initializes range of skin colors
    COLOR_MIN = cv.Scalar(0, 10, 60)
    COLOR_MAX = cv.Scalar(20, 150, 255)

    #blurs image
    cv.Smooth(img, img, cv.CV_GAUSSIAN, 9, 9)

    #makes hsv image and converts input to hsv
    hsv = cv.CreateImage(cv.GetSize(img), 8, 3)
    cv.CvtColor(img, hsv, cv.CV_BGR2HSV)

    #makes a black/white mask of skintone regions of the original image
    color_mask = cv.CreateImage(cv.GetSize(hsv), 8, 1)
    cv.InRangeS(hsv, COLOR_MIN, COLOR_MAX, color_mask)


    '''storage = cv.CreateMemStorage(0)
    frame = cv.CreateImage(cv.GetSize(img), 8, 3)
    contours = cv.FindContours (color_mask, storage, cv.CV_RETR_TREE , cv.CV_CHAIN_APPROX_SIMPLE)
    cv.DrawContours(frame, contours, cv.RGB(255, 255, 255), cv.RGB(0, 255, 0), 1 )'''

    #returns black-white skin mask
    return color_mask

#main function, takes motion start time, mute status, and previous hand position
def repeat(begin,unmute,last):

    #captures input frame
    frame = cv.QueryFrame(capture)

    #creates horizontally flipped copy of input frame to work with
    cv.Copy(frame,sframe)
    cv.Flip(sframe,sframe,1)

    #makes mask of skintones
    dog = skin(sframe)

    #inverts skintone mask to all non-skin areas
    cv.ConvertScale( dog, dog, -1, 255)

    #makes greyscale copy of frame
    cv.CvtColor(sframe,grey,cv.CV_BGR2GRAY)

    #replaces nonskin areas with white
    cv.Add(grey,black, grey,dog)


    '''cv.Cmp(grey,bgray, maks, cv.CV_CMP_EQ)
#   cv.CmpS(grey, 100, maks, cv.CV_CMP_GT)
    cv.Set(frame, [0,0,0], mask=maks)
    new = grey+grey-bgray-bgray'''

    #implements laplacian edge detection on greyscale image
    dst_16s2 = cv.CreateImage(cv.GetSize(bg), cv.IPL_DEPTH_16S, 1)
    cv.Laplace(grey, dst_16s2,5)
    cv.Convert(dst_16s2,grey)

#    cv.Dilate(grey,grey,None,1)
    #clone=cv.CloneImage(grey)
    #contours=cv.FindContours(clone, storage, cv.CV_RETR_LIST, cv.CV_CHAIN_APPROX_SIMPLE, (0, 0))

#    cv.Smooth(grey,grey,cv.CV_GAUSSIAN,9)

    #creates a threshold to binarize the image
    cv.Threshold(grey,grey,75,255,cv.CV_THRESH_BINARY)

    #creates contours on greyscale image
    storage = cv.CreateMemStorage(0)
    contours = cv.FindContours (grey, storage, cv.CV_RETR_TREE , cv.CV_CHAIN_APPROX_SIMPLE)

    #sets final display frame background to black    
    cv.Set(cframe,0)

    #sets minimum range for object detection
    mx = 20000
    #initializes hand position to previous
    best = last
    #creates some cvSeq maxcont by copying contours
    maxcont = contours

    #if contours: print(list(contours))


    #goes through all contours and finds bounding box
    while contours:
        bound_rect = cv.BoundingRect(list(contours))

        #if bounding box area is greater than min range or current max box
        if bound_rect[3]*bound_rect[2] > mx:

            #sets max to current object, creates position at center of box, and sets display contour to current
            mx = bound_rect[3]*bound_rect[2]
            best = bound_rect[0]+bound_rect[2]*.5 , bound_rect[1]+bound_rect[3]*.5
            maxcont = contours
    
        #goes to next contour
        contours = contours.h_next()
        
        #draws rectangle using bounding box coordinates
        cv.Rectangle(grey,(bound_rect[0],bound_rect[1]),(bound_rect[0]+bound_rect[2],bound_rect[1]+bound_rect[3]),255)
    
    #displays contoured greyscale image
    cv.ShowImage("w1",grey)

    #draws largest contour on final frame
    cv.DrawContours(cframe, maxcont, 255, 127, 0)

    #creates bounding box and center position of the one contour
    bound_rect = cv.BoundingRect(list(maxcont))
    cv.Rectangle(cframe,(bound_rect[0],bound_rect[1]),(bound_rect[0]+bound_rect[2],bound_rect[1]+bound_rect[3]),255)
    cv.Circle(cframe,(int(best[0]),int(best[1])),10,255,-1)
    
    '''momentz = cv.Moments(contours)
    hat = cv.GetCentralMoment(momentz,1,1)
    print(hat)
    #print(cv.CheckContourConvexity(contours))'''

    #displays image with contours
    cv.ShowImage("w2",cframe)

    #delay between frame capture
    c = cv.WaitKey(10)

    #if largest contour covers half the screen
    if mx > 153600/2:
        
        #begins timer if not yet started
        if begin == 0: begin = time.time()
        else:
            
            #sets volume to new volume, or 0 if muted
            #in Linux
            if sysname== True:   
                os.system('amixer set Master %s' % (unmute*(100-best[1]/4.8))) 
            #in Mac
            else:
                os.system('osascript -e \'set volume output volume %s\'' %(unmute*(100-best[1]/4.8)))
                #if 3 seconds have passed, stops timer and switches mute status
                if time.time()-begin > 3:
                    unmute = 1-unmute
                    begin = 0

    #stops timer and sets volume to new, if unmuted
    else:
        begin = 0
        #in Linux
        if sysname== True:
            os.system('amixer set Master %s' % (unmute*(100-best[1]/4.8)))
        #in Mac
        else:
            os.system('osascript -e \'set volume output volume %s\'' %(unmute*(100-best[1]/4.8)))
    #returns timer start, mute status, and previous hand position
    return(begin,unmute,best)

#uncomment for continuous video
while True:
    begin,unmute,last = repeat(begin,unmute,last)

#uncomment for single frame
#begin,unmute,last=repeat(begin,unmute,last)
